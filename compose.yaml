services:
  # MongoDB for main data storage
  mongodb:
    image: 'mongo:7.0'
    container_name: currency-mongodb
    environment:
      - 'MONGO_INITDB_DATABASE=currencydb'
      - 'MONGO_INITDB_ROOT_PASSWORD=secret'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - currency-network

  # PostgreSQL for Keycloak
  keycloak-postgres:
    image: 'postgres:15'
    container_name: currency-keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    ports:
      - '5432:5432'
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - currency-network

  # Keycloak for authentication and user management
  keycloak:
    image: 'quay.io/keycloak/keycloak:23.0'
    container_name: currency-keycloak
    command: start-dev --import-realm
    environment:
      KC_HOSTNAME: keycloak
      KC_PROXY: edge
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
    ports:
      - '8088:8080'
    healthcheck:
      test: [ "CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/8080' || exit 1" ]
      interval: 30s
      timeout: 15s
      retries: 15
      start_period: 120s
    volumes:
      - ./keycloak-config:/opt/keycloak/data/import
    restart: unless-stopped
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    networks:
      - currency-network

  # Redis for caching
  redis:
    image: 'redis:7-alpine'
    container_name: currency-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - currency-network

  # Currency Application
  currency-app:
    build: .
    container_name: currency-app
    entrypoint: [ "java", "-jar", "/app/target/CurrencyApp-0.0.1-SNAPSHOT.jar" ]
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: currencydb
      SPRING_DATA_MONGODB_USERNAME: root
      SPRING_DATA_MONGODB_PASSWORD: secret
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/currency-realm
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/currency-realm/protocol/openid-connect/certs
    ports:
      - '8081:8080'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - currency-network

volumes:
  mongodb_data:
  keycloak_postgres_data:
  redis_data:

networks:
  currency-network:
    driver: bridge
